apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

android {
    namespace 'ru.besttuts.stockwidget'
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "ru.besttuts.stockwidget"
        minSdkVersion 21
        targetSdkVersion 33
        multiDexEnabled true
        versionCode 16
        versionName "2.1.4"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildFeatures {
        buildConfig = true
    }

    lintOptions {
        abortOnError false
    }
    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    def room_version = "2.5.1"
    def robolectric_version = "4.4"
    def multidex_version = "2.0.1"
    def lombok_version = "1.18.22"
    def retrofit_version = "2.3.0"

    implementation "androidx.multidex:multidex:$multidex_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Push notifications
    implementation platform('com.google.firebase:firebase-bom:31.5.0')
    implementation 'com.google.firebase:firebase-messaging:23.1.2'
    implementation 'com.google.firebase:firebase-analytics:21.2.2'
    implementation 'com.google.firebase:firebase-firestore:24.5.0'
    implementation 'com.google.firebase:firebase-ads:22.0.0'
    implementation 'com.google.android.gms:play-services-analytics:18.0.2'
    implementation 'com.google.android.gms:play-services-ads:22.0.0'

    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // optional - Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    // use kapt for Kotlin
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
//    implementation 'com.google.android.gms:play-services:12.0.1'
    //    compile 'com.google.android.gms:play-services-ads:6.5.+'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    //    compile 'com.squareup.retrofit2:adapter-rxjava:'+RETROFIT_VERSION
    //    compile ('com.squareup.retrofit2:adapter-rxjava:'+RETROFIT_VERSION) {
    //        exclude group: 'io.reactivex'
    //    }
    implementation 'net.danlew:android.joda:2.9.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.9'

    // Test libs
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "org.robolectric:shadows-multidex:$robolectric_version"
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

// play-service:6.5.+ не заработала, использую 6.1.+
// данным скриптом удаляю лишние пакеты, чтобы уменьшить вес приложения
// https://gist.github.com/dmarcato/d7c91b94214acd936e42
//def toCamelCase(String string) {
//    String result = ""
//    string.findAll("[^\\W]+") { String word ->
//        result += word.capitalize()
//    }
//    return result
//}
//
//afterEvaluate { project ->
//    Configuration runtimeConfiguration = project.configurations.getByName('compile')
//    ResolutionResult resolution = runtimeConfiguration.incoming.resolutionResult
//    // Forces resolve of configuration
//    ModuleVersionIdentifier module = resolution.getAllComponents().find { it.moduleVersion.name.equals("play-services") }.moduleVersion
//
//    String prepareTaskName = "prepare${toCamelCase("${module.group} ${module.name} ${module.version}")}Library"
//    File playServiceRootFolder = project.tasks.find { it.name.equals(prepareTaskName) }.explodedDir
//
//    Task stripPlayServices = project.tasks.create(name: 'stripPlayServices', group: "Strip") {
//        inputs.files new File(playServiceRootFolder, "classes.jar")
//        outputs.dir playServiceRootFolder
//        description 'Strip useless packages from Google Play Services library to avoid reaching dex limit'
//
//        doLast {
//            copy {
//                from(file(new File(playServiceRootFolder, "classes.jar")))
//                into(file(playServiceRootFolder))
//                rename { fileName ->
//                    fileName = "classes_orig.jar"
//                }
//            }
//            tasks.create(name: "stripPlayServices" + module.version, type: Jar) {
//                destinationDir = playServiceRootFolder
//                archiveName = "classes.jar"
//                from(zipTree(new File(playServiceRootFolder, "classes_orig.jar"))) {
//                    exclude "com/google/android/gms/games/**"
//                    exclude "com/google/android/gms/panorama/**"
//                    exclude "com/google/android/gms/plus/**"
//                    exclude "com/google/android/gms/maps/**"
//                    exclude "com/google/android/gms/drive/**"
//                    exclude "com/google/android/gms/fitness/**"
//                    exclude "com/google/android/gms/wearable/**"
//                    exclude "com/google/android/gms/wallet/**"
//                    exclude "com/google/android/gms/cast/**"
//                }
//            }.execute()
//            delete file(new File(playServiceRootFolder, "classes_orig.jar"))
//        }
//    }
//
//    project.tasks.findAll { it.name.startsWith('prepare') && it.name.endsWith('Dependencies') }.each { Task task ->
//        task.dependsOn stripPlayServices
//    }
//}

//def toCamelCase(String string) {
//    String result = ""
//    string.findAll("[^\\W]+") { String word ->
//        result += word.capitalize()
//    }
//    return result
//}
//
//afterEvaluate { project ->
//    Configuration runtimeConfiguration = project.configurations.getByName('compile')
//    println runtimeConfiguration
//    ResolutionResult resolution = runtimeConfiguration.incoming.resolutionResult
//    // Forces resolve of configuration
//    ModuleVersionIdentifier module = resolution.getAllComponents().find {
//        it.moduleVersion.name.equals("play-services")
//    }.moduleVersion
//
//
//    def playServicesLibName = toCamelCase("${module.group} ${module.name} ${module.version}")
//    String prepareTaskName = "prepare${playServicesLibName}Library"
//    File playServiceRootFolder = project.tasks.find { it.name.equals(prepareTaskName) }.explodedDir
//
//
//    def tmpDir = new File(project.buildDir, 'intermediates/tmp')
//    tmpDir.mkdirs()
//    def libFile = new File(tmpDir, "${playServicesLibName}.marker")
//
//    def strippedClassFileName = "${playServicesLibName}.jar"
//    def classesStrippedJar = new File(tmpDir, strippedClassFileName)
//
//    def packageToExclude = [
//                            "com/google/android/gms/games/**",
//                            "com/google/android/gms/panorama/**",
//                            "com/google/android/gms/plus/**",
//                            "com/google/android/gms/maps/**",
//                            "com/google/android/gms/drive/**",
//                            "com/google/android/gms/fitness/**",
//                            "com/google/android/gms/wearable/**",
//                            "com/google/android/gms/wallet/**",
//                            "com/google/android/gms/cast/**"
//    ]
//
//    Task stripPlayServices = project.tasks.create(name: 'stripPlayServices', group: "Strip") {
//        inputs.files new File(playServiceRootFolder, "classes.jar")
//        outputs.dir playServiceRootFolder
//        description 'Strip useless packages from Google Play Services library to avoid reaching dex limit'
//
//        doLast {
//            def packageExcludesAsString = packageToExclude.join(",")
//            if (libFile.exists()
//                    && libFile.text == packageExcludesAsString
//                    && classesStrippedJar.exists()){
//                println "Play services already stripped"
//                copy {
//                    from(file(classesStrippedJar))
//                    into(file(playServiceRootFolder))
//                    rename { fileName ->
//                        fileName = "classes.jar"
//                    }
//                }
//            }else {
//                copy {
//                    from(file(new File(playServiceRootFolder, "classes.jar")))
//                    into(file(playServiceRootFolder))
//                    rename { fileName ->
//                        fileName = "classes_orig.jar"
//                    }
//                }
//                tasks.create(name: "stripPlayServices" + module.version, type: Jar) {
//                    destinationDir = playServiceRootFolder
//                    archiveName = "classes.jar"
//                    from(zipTree(new File(playServiceRootFolder, "classes_orig.jar"))) {
//                        exclude packageToExclude
//                    }
//                }.execute()
//                delete file(new File(playServiceRootFolder, "classes_orig.jar"))
//                copy {
//                    from(file(new File(playServiceRootFolder, "classes.jar")))
//                    into(file(tmpDir))
//                    rename { fileName ->
//                        fileName = strippedClassFileName
//                    }
//                }
//                libFile.text = packageExcludesAsString
//            }
//        }
//    }
//
//    project.tasks.findAll {
//        it.name.startsWith('prepare') && it.name.endsWith('Dependencies')
//    }.each { Task task ->
//        task.dependsOn stripPlayServices
//    }
//
//    project.tasks.findAll { it.name.contains(prepareTaskName) }.each { Task task ->
//        stripPlayServices.mustRunAfter task
//    }
//}