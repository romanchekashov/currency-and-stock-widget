apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "ru.besttuts.stockwidget"
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 10
        versionName "1.9"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

//    packagingOptions {
//        exclude 'META-INF/LICENSE'
//        exclude 'META-INF/LICENSE.txt'
//        exclude 'LICENSE.txt'
//        exclude 'META-INF/NOTICE'
//    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

ext {
    DAGGER_VERSION = '2.6.1'
    RETROFIT_VERSION = '2.1.0'
    RX_JAVA_ANDROID_VERSION = '2.0.0'
    ANDROID_SUPPORT_LIB_VERSION = '23.3.0'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:support-v4:'+ANDROID_SUPPORT_LIB_VERSION
    compile 'com.android.support:appcompat-v7:'+ANDROID_SUPPORT_LIB_VERSION
    compile 'com.android.support:design:'+ANDROID_SUPPORT_LIB_VERSION

    compile 'com.google.dagger:dagger:'+DAGGER_VERSION
    apt 'com.google.dagger:dagger-compiler:'+DAGGER_VERSION


    compile 'com.google.code.gson:gson:2.7'
    compile 'com.google.android.gms:play-services:6.1.+'
//    compile 'com.google.android.gms:play-services-ads:6.5.+'
    compile 'com.github.machinarius:preferencefragment:0.1.1'
//    compile 'com.squareup.okhttp:okhttp:2.3.0'

    compile 'io.reactivex.rxjava2:rxandroid:'+RX_JAVA_ANDROID_VERSION
    compile 'io.reactivex.rxjava2:rxjava:'+RX_JAVA_ANDROID_VERSION

    compile 'com.squareup.retrofit2:retrofit:'+RETROFIT_VERSION
    compile 'com.squareup.retrofit2:converter-gson:'+RETROFIT_VERSION
//    compile 'com.squareup.retrofit2:adapter-rxjava:'+RETROFIT_VERSION
    compile ('com.squareup.retrofit2:adapter-rxjava:'+RETROFIT_VERSION) {
        exclude group: 'io.reactivex'
    }
//    testCompile "junit:junit:4.10"
//    testCompile "org.assertj:assertj-core:1.7.0"
//    testCompile "org.robolectric:robolectric:3.0"
//
//    // only required for android studio to see these dependencies
//    androidTestCompile "junit:junit:4.10"
//    androidTestCompile "org.assertj:assertj-core:1.7.0"
//    androidTestCompile "org.robolectric:robolectric:3.0"
    androidTestCompile 'com.android.support:support-annotations:'+ANDROID_SUPPORT_LIB_VERSION
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'

    testCompile 'junit:junit:4.12'
    testCompile "org.assertj:assertj-core:1.7.0"
}

// play-service:6.5.+ не заработала, использую 6.1.+
// данным скриптом удаляю лишние пакеты, чтобы уменьшить вес приложения
// https://gist.github.com/dmarcato/d7c91b94214acd936e42
//def toCamelCase(String string) {
//    String result = ""
//    string.findAll("[^\\W]+") { String word ->
//        result += word.capitalize()
//    }
//    return result
//}
//
//afterEvaluate { project ->
//    Configuration runtimeConfiguration = project.configurations.getByName('compile')
//    ResolutionResult resolution = runtimeConfiguration.incoming.resolutionResult
//    // Forces resolve of configuration
//    ModuleVersionIdentifier module = resolution.getAllComponents().find { it.moduleVersion.name.equals("play-services") }.moduleVersion
//
//    String prepareTaskName = "prepare${toCamelCase("${module.group} ${module.name} ${module.version}")}Library"
//    File playServiceRootFolder = project.tasks.find { it.name.equals(prepareTaskName) }.explodedDir
//
//    Task stripPlayServices = project.tasks.create(name: 'stripPlayServices', group: "Strip") {
//        inputs.files new File(playServiceRootFolder, "classes.jar")
//        outputs.dir playServiceRootFolder
//        description 'Strip useless packages from Google Play Services library to avoid reaching dex limit'
//
//        doLast {
//            copy {
//                from(file(new File(playServiceRootFolder, "classes.jar")))
//                into(file(playServiceRootFolder))
//                rename { fileName ->
//                    fileName = "classes_orig.jar"
//                }
//            }
//            tasks.create(name: "stripPlayServices" + module.version, type: Jar) {
//                destinationDir = playServiceRootFolder
//                archiveName = "classes.jar"
//                from(zipTree(new File(playServiceRootFolder, "classes_orig.jar"))) {
//                    exclude "com/google/android/gms/games/**"
//                    exclude "com/google/android/gms/panorama/**"
//                    exclude "com/google/android/gms/plus/**"
//                    exclude "com/google/android/gms/maps/**"
//                    exclude "com/google/android/gms/drive/**"
//                    exclude "com/google/android/gms/fitness/**"
//                    exclude "com/google/android/gms/wearable/**"
//                    exclude "com/google/android/gms/wallet/**"
//                    exclude "com/google/android/gms/cast/**"
//                }
//            }.execute()
//            delete file(new File(playServiceRootFolder, "classes_orig.jar"))
//        }
//    }
//
//    project.tasks.findAll { it.name.startsWith('prepare') && it.name.endsWith('Dependencies') }.each { Task task ->
//        task.dependsOn stripPlayServices
//    }
//}

//def toCamelCase(String string) {
//    String result = ""
//    string.findAll("[^\\W]+") { String word ->
//        result += word.capitalize()
//    }
//    return result
//}
//
//afterEvaluate { project ->
//    Configuration runtimeConfiguration = project.configurations.getByName('compile')
//    println runtimeConfiguration
//    ResolutionResult resolution = runtimeConfiguration.incoming.resolutionResult
//    // Forces resolve of configuration
//    ModuleVersionIdentifier module = resolution.getAllComponents().find {
//        it.moduleVersion.name.equals("play-services")
//    }.moduleVersion
//
//
//    def playServicesLibName = toCamelCase("${module.group} ${module.name} ${module.version}")
//    String prepareTaskName = "prepare${playServicesLibName}Library"
//    File playServiceRootFolder = project.tasks.find { it.name.equals(prepareTaskName) }.explodedDir
//
//
//    def tmpDir = new File(project.buildDir, 'intermediates/tmp')
//    tmpDir.mkdirs()
//    def libFile = new File(tmpDir, "${playServicesLibName}.marker")
//
//    def strippedClassFileName = "${playServicesLibName}.jar"
//    def classesStrippedJar = new File(tmpDir, strippedClassFileName)
//
//    def packageToExclude = [
//                            "com/google/android/gms/games/**",
//                            "com/google/android/gms/panorama/**",
//                            "com/google/android/gms/plus/**",
//                            "com/google/android/gms/maps/**",
//                            "com/google/android/gms/drive/**",
//                            "com/google/android/gms/fitness/**",
//                            "com/google/android/gms/wearable/**",
//                            "com/google/android/gms/wallet/**",
//                            "com/google/android/gms/cast/**"
//    ]
//
//    Task stripPlayServices = project.tasks.create(name: 'stripPlayServices', group: "Strip") {
//        inputs.files new File(playServiceRootFolder, "classes.jar")
//        outputs.dir playServiceRootFolder
//        description 'Strip useless packages from Google Play Services library to avoid reaching dex limit'
//
//        doLast {
//            def packageExcludesAsString = packageToExclude.join(",")
//            if (libFile.exists()
//                    && libFile.text == packageExcludesAsString
//                    && classesStrippedJar.exists()){
//                println "Play services already stripped"
//                copy {
//                    from(file(classesStrippedJar))
//                    into(file(playServiceRootFolder))
//                    rename { fileName ->
//                        fileName = "classes.jar"
//                    }
//                }
//            }else {
//                copy {
//                    from(file(new File(playServiceRootFolder, "classes.jar")))
//                    into(file(playServiceRootFolder))
//                    rename { fileName ->
//                        fileName = "classes_orig.jar"
//                    }
//                }
//                tasks.create(name: "stripPlayServices" + module.version, type: Jar) {
//                    destinationDir = playServiceRootFolder
//                    archiveName = "classes.jar"
//                    from(zipTree(new File(playServiceRootFolder, "classes_orig.jar"))) {
//                        exclude packageToExclude
//                    }
//                }.execute()
//                delete file(new File(playServiceRootFolder, "classes_orig.jar"))
//                copy {
//                    from(file(new File(playServiceRootFolder, "classes.jar")))
//                    into(file(tmpDir))
//                    rename { fileName ->
//                        fileName = strippedClassFileName
//                    }
//                }
//                libFile.text = packageExcludesAsString
//            }
//        }
//    }
//
//    project.tasks.findAll {
//        it.name.startsWith('prepare') && it.name.endsWith('Dependencies')
//    }.each { Task task ->
//        task.dependsOn stripPlayServices
//    }
//
//    project.tasks.findAll { it.name.contains(prepareTaskName) }.each { Task task ->
//        stripPlayServices.mustRunAfter task
//    }
//}